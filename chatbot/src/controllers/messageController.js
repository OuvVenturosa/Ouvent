/**
 * Controlador de mensagens
 * Gerencia o processamento de mensagens recebidas
 */

// Importa√ß√£o do cliente ser√° feita dinamicamente para evitar depend√™ncia circular
const { ADMINS } = require('../config/config');
const { sendMessage, getUserState, setUserState, registerMenuOption } = require('../services/messageService');
const { createAtendimento, getAtendimento, updateAtendimento } = require('../models/atendimentoModel');
const { notificarSecretariaWhatsApp } = require('../services/messageService');
const { notificarSecretariaEmail } = require('../services/emailService');
const { registerAtendimento } = require('../services/reportService');

/**
 * Inicializa o controlador de mensagens
 * @param {Object} client - O cliente WhatsApp inicializado
 */
function initializeMessageController(client) {
    // Configura o evento de mensagem
    client.on('message', handleMessage);
    console.log('‚úÖ Controlador de mensagens inicializado');
}

/**
 * Processa uma mensagem recebida
 * @param {Message} message Mensagem recebida
 */
async function handleMessage(message) {
    try {
        const from = message.from;
        const body = message.body;
        
        console.log(`üì© Mensagem recebida de ${from}: ${body}`);
        
        // Registra a mensagem no banco de dados para fins de log
        const { registrarInteracao } = require('../models/atendimentoModel');
        const userState = await getUserState(from);
        
        // Se houver um protocolo associado, registra a intera√ß√£o
        if (userState && userState.protocolNumber) {
            await registrarInteracao(userState.protocolNumber, {
                telefone: from,
                mensagem: body,
                origem: 'usuario',
                timestamp: new Date()
            });
        }
        
        // Verifica se √© uma mensagem de administrador
        if (ADMINS.includes(from)) {
            await handleAdminMessage(message);
            return;
        }
        
        // Processa a mensagem do usu√°rio
        await handleUserMessage(message);
    } catch (error) {
        console.error('‚ùå Erro ao processar mensagem:', error);
    }
}

/**
 * Processa uma mensagem de administrador
 * @param {Message} message Mensagem recebida
 */
async function handleAdminMessage(message) {
    const from = message.from;
    const body = message.body;
    
    try {
        // Implementar l√≥gica para comandos de administrador
        if (body.startsWith('/status')) {
            // Comando para verificar o status do sistema
            // Busca estat√≠sticas do banco de dados
            const { query } = require('../database/dbConnection');
            
            // Total de atendimentos
            const totalAtendimentos = await query('SELECT COUNT(*) as total FROM demandas');
            
            // Atendimentos pendentes
            const atendimentosPendentes = await query("SELECT COUNT(*) as total FROM demandas WHERE status = 'pendente' OR status = 'em_analise' OR status = 'em_atendimento'");
            
            // Atendimentos conclu√≠dos
            const atendimentosConcluidos = await query("SELECT COUNT(*) as total FROM demandas WHERE status = 'concluido'");
            
            // Usu√°rios √∫nicos
            const usuariosUnicos = await query('SELECT COUNT(DISTINCT telefone) as total FROM demandas');
            
            const status = `ü§ñ *Status do Sistema*\n\n` +
                          `üìä Total de atendimentos: ${totalAtendimentos[0].total}\n` +
                          `‚è≥ Atendimentos pendentes: ${atendimentosPendentes[0].total}\n` +
                          `‚úÖ Atendimentos conclu√≠dos: ${atendimentosConcluidos[0].total}\n` +
                          `üë• Usu√°rios √∫nicos: ${usuariosUnicos[0].total}\n` +
                          `‚è±Ô∏è Uptime: ${formatUptime(process.uptime())}\n`;
            
            await sendMessage(from, status);
        } else if (body.startsWith('/relatorio')) {
            // Comando para gerar relat√≥rio
            const { query } = require('../database/dbConnection');
            
            // Busca estat√≠sticas por secretaria
            const estatisticasSecretarias = await query(`
                SELECT 
                    secretaria_responsavel, 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'concluido' THEN 1 ELSE 0 END) as concluidos,
                    SUM(CASE WHEN status = 'pendente' OR status = 'em_analise' OR status = 'em_atendimento' THEN 1 ELSE 0 END) as pendentes
                FROM demandas 
                GROUP BY secretaria_responsavel
            `);
            
            let relatorio = `üìä *Relat√≥rio por Secretaria*\n\n`;
            
            estatisticasSecretarias.forEach(sec => {
                relatorio += `üèõÔ∏è *${sec.secretaria_responsavel}*\n` +
                             `   Total: ${sec.total}\n` +
                             `   Conclu√≠dos: ${sec.concluidos}\n` +
                             `   Pendentes: ${sec.pendentes}\n\n`;
            });
            
            await sendMessage(from, relatorio);
        } else {
            // Mensagem de ajuda para administrador
            const help = `ü§ñ *Comandos de Administrador*\n\n` +
                        `/status - Verificar status do sistema\n` +
                        `/relatorio - Gerar relat√≥rio por secretaria\n`;
            
            await sendMessage(from, help);
        }
    } catch (error) {
        console.error('‚ùå Erro ao processar comando de administrador:', error);
        await sendMessage(from, '‚ùå Ocorreu um erro ao processar seu comando. Por favor, tente novamente mais tarde.');
    }
}

/**
 * Processa uma mensagem de usu√°rio
 * @param {Message} message Mensagem recebida
 */
async function handleUserMessage(message) {
    const from = message.from;
    const body = message.body;
    
    try {
        // Obt√©m o estado atual do usu√°rio do banco de dados
        const userState = await getUserState(from);
        const currentState = userState.estado || 'inicial';
        const stateData = userState.dados || {};
        
        console.log(`üîÑ Estado atual do usu√°rio ${from}: ${currentState}`);
        
        // Se o usu√°rio tem um protocolo associado, registra a intera√ß√£o
        if (stateData.protocolNumber) {
            await registrarInteracao(stateData.protocolNumber, {
                telefone: from,
                mensagem: body,
                origem: 'usuario',
                timestamp: new Date().toISOString()
            });
        }
        
        // Processa a mensagem com base no estado atual
        switch (currentState) {
            case 'inicial':
                // Envia mensagem de boas-vindas
                await sendWelcomeMessage(from);
                await setUserState(from, 'menu_principal', {});
                break;
                
            case 'menu_principal':
                // Processa a sele√ß√£o do menu principal
                await processarMenuPrincipal(from, body);
                break;
                
            case 'aguardando_tipo':
                // Processa a sele√ß√£o do tipo de solicita√ß√£o
                await processarTipoSolicitacao(from, body, stateData);
                break;
                
            case 'aguardando_secretaria':
                // Processa a sele√ß√£o da secretaria
                await processarSelecaoSecretaria(from, body, stateData);
                break;
                
            case 'aguardando_descricao':
                // Processa a descri√ß√£o da solicita√ß√£o
                await processarDescricaoSolicitacao(from, body, stateData);
                break;
                
            case 'aguardando_confirmacao':
                // Processa a confirma√ß√£o da solicita√ß√£o
                await processarConfirmacaoSolicitacao(from, body, stateData);
                break;
                
            case 'aguardando_protocolo':
                // Processa a consulta de protocolo
                await processarConsultaProtocolo(from, body);
                break;
                
            default:
                // Estado desconhecido, volta para o menu principal
                await sendMessage(from, "Desculpe, n√£o entendi. Vamos recome√ßar.");
                await setUserState(from, 'menu_principal', {});
                break;
        }
        
    } catch (error) {
        console.error(`‚ùå Erro ao processar mensagem do usu√°rio ${from}:`, error);
        await sendMessage(from, "Desculpe, ocorreu um erro ao processar sua mensagem. Por favor, tente novamente mais tarde.");
    }
}

/**
 * Processa a sele√ß√£o do menu principal
 * @param {string} from N√∫mero do telefone do usu√°rio
 * @param {string} body Texto da mensagem
 */
async function processarMenuPrincipal(from, body) {
    // Implementa√ß√£o do processamento do menu principal
    switch (body) {
        case '1': // Nova solicita√ß√£o
            await sendMessage(from, "Qual o tipo de solicita√ß√£o deseja fazer?\n1 - Reclama√ß√£o\n2 - Den√∫ncia\n3 - Elogio\n4 - Sugest√£o\n5 - Informa√ß√£o");
            await setUserState(from, 'aguardando_tipo', {});
            break;
        case '2': // Consultar solicita√ß√£o
            await sendMessage(from, "Por favor, informe o n√∫mero do protocolo da sua solicita√ß√£o:");
            await setUserState(from, 'aguardando_protocolo', {});
            break;
        case '3': // Informa√ß√µes
            await sendMessage(from, "üìã *Informa√ß√µes da Ouvidoria*\n\nHor√°rio de funcionamento: Segunda a Sexta, 8h √†s 17h\nTelefone: (XX) XXXX-XXXX\nE-mail: ouvidoria@venturosa.pe.gov.br");
            await setUserState(from, 'menu_principal', {});
            break;
        default:
            await sendMessage(from, "Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida:\n1 - Nova solicita√ß√£o\n2 - Consultar solicita√ß√£o\n3 - Informa√ß√µes");
            break;
    }
}

/**
 * Processa a sele√ß√£o do tipo de solicita√ß√£o
 * @param {string} from N√∫mero do telefone do usu√°rio
 * @param {string} body Texto da mensagem
 * @param {Object} stateData Dados do estado atual do usu√°rio
 */
async function processarTipoSolicitacao(from, body, stateData) {
    const tiposSolicitacao = {
        '1': 'Reclama√ß√£o',
        '2': 'Den√∫ncia',
        '3': 'Elogio',
        '4': 'Sugest√£o',
        '5': 'Informa√ß√£o'
    };
    
    const tipoSelecionado = tiposSolicitacao[body];
    
    if (tipoSelecionado) {
        // Registra a op√ß√£o selecionada
        await registerMenuOption(from, `Tipo: ${tipoSelecionado}`);
        
        // Atualiza o estado com o tipo selecionado
        const newStateData = { ...stateData, tipoSolicitacao: tipoSelecionado };
        
        // Solicita a secretaria respons√°vel
        await sendMessage(from, "Por favor, digite a op√ß√£o da Secretaria que deseja atendimento:\n\n" +
            "*1*: üèûÔ∏è Sec. Desenv. Rural e Meio Ambiente\n" +
            "*2*: üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Sec. Assist√™ncia Social\n" +
            "*3*: üìö Sec. Educa√ß√£o\n" +
            "*4*: üë∑ Sec. Infraest. e Seg. P√∫blica\n" +
            "*5*: üÜò Sec. Sa√∫de e Direitos da Mulher\n" +
            "*6*: üè• Hosp. e Matern. Justa Maria Bezerra\n" +
            "*7*: üë©üèª‚Äç‚öïÔ∏è Programa Mulher Segura\n" +
            "*8*: üìà Sec. Finan√ßa (Setor de Tributos)\n" +
            "*9*: ü§µ Sec. Administra√ß√£o (Servidores Municipais)");
        
        await setUserState(from, 'aguardando_secretaria', newStateData);
    } else {
        await sendMessage(from, "Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida:\n" +
            "1 - Reclama√ß√£o\n" +
            "2 - Den√∫ncia\n" +
            "3 - Elogio\n" +
            "4 - Sugest√£o\n" +
            "5 - Informa√ß√£o");
    }
}

/**
 * Processa a sele√ß√£o da secretaria
 * @param {string} from N√∫mero do telefone do usu√°rio
 * @param {string} body Texto da mensagem
 * @param {Object} stateData Dados do estado atual do usu√°rio
 */
async function processarSelecaoSecretaria(from, body, stateData) {
    const secretarias = {
        '1': 'Secretaria de Desenvolvimento Rural e Meio Ambiente',
        '2': 'Secretaria de Assist√™ncia Social',
        '3': 'Secretaria de Educa√ß√£o e Esporte',
        '4': 'Secretaria de Infraestrutura e Seguran√ßa P√∫blica',
        '5': 'Secretaria de Sa√∫de e Direitos da Mulher',
        '6': 'Hospital e Maternidade Justa Maria Bezerra',
        '7': 'Programa Mulher Segura (Coordenadora da Mulher)',
        '8': 'Secretaria de Finan√ßas - Setor de Tributos',
        '9': 'Secretaria de Administra√ß√£o - Servidores Municipais'
    };
    
    const secretariaSelecionada = secretarias[body];
    
    if (secretariaSelecionada) {
        // Registra a op√ß√£o selecionada
        await registerMenuOption(from, `Secretaria: ${secretariaSelecionada}`);
        
        // Atualiza o estado com id e nome da secretaria selecionada
        const newStateData = { ...stateData, secretariaId: parseInt(body, 10), secretaria: secretariaSelecionada };
        
        // Solicita a descri√ß√£o da solicita√ß√£o
        await sendMessage(from, `Por favor, descreva detalhadamente sua ${stateData.tipoSolicitacao.toLowerCase()} para a Secretaria de ${secretariaSelecionada}:`);
        
        await setUserState(from, 'aguardando_descricao', newStateData);
    } else {
        await sendMessage(from, "Op√ß√£o inv√°lida. Por favor, escolha uma secretaria v√°lida:");
    }
}

/**
 * Processa a descri√ß√£o da solicita√ß√£o
 * @param {string} from N√∫mero do telefone do usu√°rio
 * @param {string} body Texto da mensagem
 * @param {Object} stateData Dados do estado atual do usu√°rio
 */
async function processarDescricaoSolicitacao(from, body, stateData) {
    // Verifica se a descri√ß√£o tem pelo menos 10 caracteres
    if (body.length < 10) {
        await sendMessage(from, "Por favor, forne√ßa uma descri√ß√£o mais detalhada (m√≠nimo de 10 caracteres).");
        return;
    }
    
    // Atualiza o estado com a descri√ß√£o
    const newStateData = { ...stateData, descricao: body };
    
    // Solicita confirma√ß√£o
    const mensagemConfirmacao = `üìã *Resumo da solicita√ß√£o*\n\n` +
        `*Tipo:* ${stateData.tipoSolicitacao}\n` +
        `*Secretaria:* ${stateData.secretaria}\n` +
        `*Descri√ß√£o:* ${body}\n\n` +
        `Confirma o envio desta solicita√ß√£o?\n` +
        `1 - Sim, enviar\n` +
        `2 - N√£o, cancelar`;
    
    await sendMessage(from, mensagemConfirmacao);
    await setUserState(from, 'aguardando_confirmacao', newStateData);
}

/**
 * Processa a confirma√ß√£o da solicita√ß√£o
 * @param {string} from N√∫mero do telefone do usu√°rio
 * @param {string} body Texto da mensagem
 * @param {Object} stateData Dados do estado atual do usu√°rio
 */
async function processarConfirmacaoSolicitacao(from, body, stateData) {
    if (body === '1') {
        try {
            // Cria a solicita√ß√£o no banco de dados
            const { createAtendimento } = require('../models/atendimentoModel');
            const protocolo = await createAtendimento({
                telefone: from,
                nome: 'Solicitante WhatsApp',
                servico: stateData.tipoSolicitacao,
                mensagem: stateData.descricao,
                secretaria: stateData.secretaria,
                status: 'Aberto'
            });
            
            // Envia mensagem de confirma√ß√£o com o n√∫mero do protocolo
            await sendMessage(from, `‚úÖ Solicita√ß√£o registrada com sucesso!\n\n*Protocolo:* ${protocolo}\n\nGuarde este n√∫mero para consultas futuras. Voc√™ receber√° atualiza√ß√µes sobre o andamento da sua solicita√ß√£o.`);
            
            // Notifica a secretaria respons√°vel
            await notificarSecretariaWhatsApp(stateData.secretariaId || 0, protocolo, {
                nome: 'Solicitante WhatsApp',
                telefone: from,
                email: null,
                tipoNome: stateData.tipoSolicitacao,
                descricao: stateData.descricao,
                status: 'Aberto'
            });
            
            // Limpa o estado do usu√°rio
            await setUserState(from, 'menu_principal', { protocolNumber: protocolo });
            
            // Envia o menu principal novamente ap√≥s 2 segundos
            setTimeout(async () => {
                await sendMessage(from, "O que deseja fazer agora?\n1 - Nova solicita√ß√£o\n2 - Consultar solicita√ß√£o");
            }, 2000);
            
        } catch (error) {
            console.error('Erro ao criar solicita√ß√£o:', error);
            await sendMessage(from, "‚ùå Ocorreu um erro ao registrar sua solicita√ß√£o. Por favor, tente novamente mais tarde.");
            await setUserState(from, 'menu_principal', {});
        }
    } else if (body === '2') {
        // Cancela a solicita√ß√£o
        await sendMessage(from, "Solicita√ß√£o cancelada. O que deseja fazer agora?\n1 - Nova solicita√ß√£o\n2 - Consultar solicita√ß√£o");
        await setUserState(from, 'menu_principal', {});
    } else {
        await sendMessage(from, "Op√ß√£o inv√°lida. Por favor, confirme sua solicita√ß√£o:\n1 - Sim, enviar\n2 - N√£o, cancelar");
    }
}

/**
 * Processa a consulta de protocolo
 * @param {string} from N√∫mero do telefone do usu√°rio
 * @param {string} body Texto da mensagem
 */
async function processarConsultaProtocolo(from, body) {
    try {
        // Verifica se o protocolo √© v√°lido
        const { getSolicitacaoByProtocolo } = require('../models/solicitacaoModel');
        const solicitacao = await getSolicitacaoByProtocolo(body.trim());
        
        if (solicitacao) {
            // Formata a data de cria√ß√£o
            const dataCriacao = new Date(solicitacao.data_criacao);
            const dataFormatada = `${dataCriacao.getDate().toString().padStart(2, '0')}/${(dataCriacao.getMonth() + 1).toString().padStart(2, '0')}/${dataCriacao.getFullYear()}`;
            
            // Envia os detalhes da solicita√ß√£o
            const mensagemDetalhes = `üìã *Detalhes da Solicita√ß√£o*\n\n` +
                `*Protocolo:* ${solicitacao.protocolo}\n` +
                `*Tipo:* ${solicitacao.servico}\n` +
                `*Secretaria:* ${solicitacao.secretaria_responsavel}\n` +
                `*Status:* ${solicitacao.status}\n` +
                `*Data:* ${dataFormatada}\n` +
                `*Descri√ß√£o:* ${solicitacao.descricao}\n\n` +
                `O que deseja fazer agora?\n` +
                `1 - Nova solicita√ß√£o\n` +
                `2 - Consultar outra solicita√ß√£o`;
            
            await sendMessage(from, mensagemDetalhes);
            await setUserState(from, 'menu_principal', { protocolNumber: solicitacao.protocolo });
        } else {
            await sendMessage(from, "‚ùå Protocolo n√£o encontrado. Verifique se o n√∫mero est√° correto e tente novamente.\n\nO que deseja fazer agora?\n1 - Nova solicita√ß√£o\n2 - Consultar solicita√ß√£o");
            await setUserState(from, 'menu_principal', {});
        }
    } catch (error) {
        console.error('Erro ao consultar protocolo:', error);
        await sendMessage(from, "‚ùå Ocorreu um erro ao consultar o protocolo. Por favor, tente novamente mais tarde.\n\nO que deseja fazer agora?\n1 - Nova solicita√ß√£o\n2 - Consultar solicita√ß√£o");
        await setUserState(from, 'menu_principal', {});
    }
}

// As fun√ß√µes de exporta√ß√£o ser√£o mantidas no final do arquivo

// Fun√ß√£o antiga mantida para compatibilidade
/**
 * Envia a mensagem de boas-vindas para o usu√°rio
 * @param {string} to N√∫mero do telefone do destinat√°rio
 */
async function sendWelcomeMessage(to) {
    const welcome = `ü§ñ *Bem-vindo √† Ouvidoria Municipal*\n\n` +
                   `Ol√°! Sou o assistente virtual da Ouvidoria Municipal. Como posso ajudar?\n\n` +
                   `1Ô∏è‚É£ - Nova Solicita√ß√£o\n` +
                   `2Ô∏è‚É£ - Consultar Protocolo\n` +
                   `3Ô∏è‚É£ - Informa√ß√µes\n`;
    
    await sendMessage(to, welcome);
    
    // Define o estado do usu√°rio
    await setUserState(to, 'menu_principal', {});
}

/**
 * Processa a sele√ß√£o do menu principal
 * @param {string} from N√∫mero de origem
 * @param {string} body Corpo da mensagem
 */
async function handleMainMenu(from, body) {
    // Registra a op√ß√£o selecionada
    registerMenuOption(from, body);
    
    switch (body) {
        case '1':
            // Nova solicita√ß√£o
            await startNewRequest(from);
            break;
        case '2':
            // Consultar protocolo
            await startProtocolQuery(from);
            break;
        case '3':
            // Informa√ß√µes
            await sendInformation(from);
            break;
        default:
            // Op√ß√£o inv√°lida
            await sendMessage(from, '‚ùå Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida.');
            break;
    }
}

/**
 * Inicia o fluxo de nova solicita√ß√£o
 * @param {string} to N√∫mero de destino
 */
async function startNewRequest(to) {
    const message = `üìù *Nova Solicita√ß√£o*\n\n` +
                   `Por favor, selecione o tipo de solicita√ß√£o:\n\n` +
                   `1Ô∏è‚É£ - Reclama√ß√£o\n` +
                   `2Ô∏è‚É£ - Den√∫ncia\n` +
                   `3Ô∏è‚É£ - Sugest√£o\n` +
                   `4Ô∏è‚É£ - Elogio\n` +
                   `5Ô∏è‚É£ - Informa√ß√£o\n` +
                   `0Ô∏è‚É£ - Voltar ao menu principal\n`;
    
    await sendMessage(to, message);
    
    // Define o estado do usu√°rio
    setUserState(to, 'NOVA_SOLICITACAO', { step: 'TIPO' });
}

/**
 * Processa uma nova solicita√ß√£o
 * @param {string} from N√∫mero de origem
 * @param {string} body Corpo da mensagem
 * @param {Object} userState Estado do usu√°rio
 */
async function handleNewRequest(from, body, userState) {
    // Verifica se o usu√°rio quer voltar ao menu principal
    if (body === '0') {
        await sendWelcomeMessage(from);
        return;
    }
    
    // Processa a mensagem de acordo com o passo atual
    switch (userState.step) {
        case 'TIPO':
            await handleRequestType(from, body);
            break;
        case 'SECRETARIA':
            await handleRequestSecretaria(from, body, userState);
            break;
        case 'DESCRICAO':
            await handleRequestDescricao(from, body, userState);
            break;
        case 'NOME':
            await handleRequestNome(from, body, userState);
            break;
        case 'TELEFONE':
            await handleRequestTelefone(from, body, userState);
            break;
        case 'EMAIL':
            await handleRequestEmail(from, body, userState);
            break;
        case 'CONFIRMACAO':
            await handleRequestConfirmacao(from, body, userState);
            break;
        default:
            // Passo desconhecido, reinicia o fluxo
            await startNewRequest(from);
            break;
    }
}

/**
 * Inicia o fluxo de consulta de protocolo
 * @param {string} to N√∫mero de destino
 */
async function startProtocolQuery(to) {
    const message = `üîç *Consulta de Protocolo*\n\n` +
                   `Por favor, digite o n√∫mero do protocolo que deseja consultar:\n\n` +
                   `0Ô∏è‚É£ - Voltar ao menu principal\n`;
    
    await sendMessage(to, message);
    
    // Define o estado do usu√°rio
    setUserState(to, 'CONSULTAR_PROTOCOLO');
}

/**
 * Processa uma consulta de protocolo
 * @param {string} from N√∫mero de origem
 * @param {string} body Corpo da mensagem
 */
async function handleProtocolQuery(from, body) {
    // Verifica se o usu√°rio quer voltar ao menu principal
    if (body === '0') {
        await sendWelcomeMessage(from);
        return;
    }
    
    // Consulta o protocolo
    const atendimento = getAtendimento(body);
    
    if (!atendimento) {
        // Protocolo n√£o encontrado
        await sendMessage(from, '‚ùå Protocolo n√£o encontrado. Por favor, verifique o n√∫mero e tente novamente.');
        return;
    }
    
    // Formata a mensagem com os dados do atendimento
    const message = `üîç *Protocolo ${atendimento.protocolNumber}*\n\n` +
                   `üìå Tipo: ${['Reclama√ß√£o','Den√∫ncia','Sugest√£o','Elogio','Informa√ß√£o'][atendimento.tipo-1]}\n` +
                   `üèõÔ∏è Secretaria: ${atendimento.secretaria}\n` +
                   `üìù Descri√ß√£o: ${atendimento.descricao}\n` +
                   `‚öôÔ∏è Status: ${atendimento.status}\n` +
                   `üìÖ Data: ${atendimento.createdAt.toLocaleDateString()}\n\n` +
                   `0Ô∏è‚É£ - Voltar ao menu principal\n`;
    
    await sendMessage(from, message);
}

/**
 * Envia informa√ß√µes sobre a ouvidoria
 * @param {string} to N√∫mero de destino
 */
async function sendInformation(to) {
    const info = `‚ÑπÔ∏è *Informa√ß√µes sobre a Ouvidoria Municipal*\n\n` +
               `A Ouvidoria Municipal √© um canal de comunica√ß√£o entre o cidad√£o e a Prefeitura Municipal.\n\n` +
               `üè¢ *Endere√ßo*\n` +
               `Prefeitura Municipal\n` +
               `Rua Principal, 123\n` +
               `Centro - CEP: 12345-678\n\n` +
               `üìû *Telefone*\n` +
               `(87) 3743-1156\n\n` +
               `üìß *E-mail*\n` +
               `ouvidoria.venturosa@gmail.com\n\n` +
               `‚è±Ô∏è *Hor√°rio de Atendimento*\n` +
               `Segunda a Sexta: 08h √†s 14h\n\n` +
               `0Ô∏è‚É£ - Voltar ao menu principal\n`;
    
    await sendMessage(to, info);
    
    // Aguarda o usu√°rio voltar ao menu principal
    setUserState(to, 'INFORMACOES');
}

/**
 * Formata o tempo de atividade
 * @param {number} seconds Tempo em segundos
 * @returns {string} Tempo formatado
 */
function formatUptime(seconds) {
    const days = Math.floor(seconds / 86400);
    seconds %= 86400;
    const hours = Math.floor(seconds / 3600);
    seconds %= 3600;
    const minutes = Math.floor(seconds / 60);
    seconds = Math.floor(seconds % 60);
    
    return `${days}d ${hours}h ${minutes}m ${seconds}s`;
}

/**
 * Processa a sele√ß√£o do tipo de solicita√ß√£o
 * @param {string} from N√∫mero de origem
 * @param {string} body Corpo da mensagem
 */
async function handleRequestType(from, body) {
    // Verifica se a op√ß√£o √© v√°lida
    const tipoOptions = ['1', '2', '3', '4', '5'];
    if (!tipoOptions.includes(body)) {
        await sendMessage(from, '‚ùå Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida.');
        return;
    }
    
    // Mapeia as op√ß√µes para os tipos de solicita√ß√£o
    const tipoMap = {
        '1': 'Reclama√ß√£o',
        '2': 'Den√∫ncia',
        '3': 'Sugest√£o',
        '4': 'Elogio',
        '5': 'Informa√ß√£o'
    };
    
    // Atualiza o estado do usu√°rio com o tipo selecionado
    const userState = getUserState(from);
    userState.tipo = parseInt(body);
    userState.tipoNome = tipoMap[body];
    userState.step = 'SECRETARIA';
    setUserState(from, 'NOVA_SOLICITACAO', userState);
    
    // Envia a mensagem para sele√ß√£o da secretaria
    const message = `üìù *Nova ${tipoMap[body]}*\n\n` +
                   `Por favor, selecione a secretaria respons√°vel:\n\n` +
                   `1Ô∏è‚É£ - Secretaria de Desenvolvimento Rural e Meio Ambiente\n` +
                   `2Ô∏è‚É£ - Secretaria de Assist√™ncia Social\n` +
                   `3Ô∏è‚É£ - Secretaria de Educa√ß√£o e Esporte\n` +
                   `4Ô∏è‚É£ - Secretaria de Infraestrutura e Seguran√ßa P√∫blica\n` +
                   `5Ô∏è‚É£ - Secretaria de Sa√∫de e Direitos da Mulher\n` +
                   `6Ô∏è‚É£ - Hospital e Maternidade Justa Maria Bezerra\n` +
                   `7Ô∏è‚É£ - Programa Mulher Segura (Coordenadora da Mulher)\n` +
                   `8Ô∏è‚É£ - Secretaria de Finan√ßas - Setor de Tributos\n` +
                   `9Ô∏è‚É£ - Secretaria de Administra√ß√£o - Servidores Municipais\n` +
                   `0Ô∏è‚É£ - Voltar ao menu principal\n`;
    
    await sendMessage(from, message);
}

/**
 * Processa a sele√ß√£o da secretaria
 * @param {string} from N√∫mero de origem
 * @param {string} body Corpo da mensagem
 * @param {Object} userState Estado do usu√°rio
 */
async function handleRequestSecretaria(from, body, userState) {
    // Verifica se a op√ß√£o √© v√°lida
    const secretariaOptions = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
    if (!secretariaOptions.includes(body)) {
        await sendMessage(from, '‚ùå Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida.');
        return;
    }
    
    // Mapeia as op√ß√µes para as secretarias
    const secretariaMap = {
        '1': 'Secretaria de Desenvolvimento Rural e Meio Ambiente',
        '2': 'Secretaria de Assist√™ncia Social',
        '3': 'Secretaria de Educa√ß√£o e Esporte',
        '4': 'Secretaria de Infraestrutura e Seguran√ßa P√∫blica',
        '5': 'Secretaria de Sa√∫de e Direitos da Mulher',
        '6': 'Hospital e Maternidade Justa Maria Bezerra',
        '7': 'Programa Mulher Segura (Coordenadora da Mulher)',
        '8': 'Secretaria de Finan√ßas - Setor de Tributos',
        '9': 'Secretaria de Administra√ß√£o - Servidores Municipais'
    };
    
    // Atualiza o estado do usu√°rio com a secretaria selecionada
    userState.secretaria = parseInt(body);
    userState.secretariaNome = secretariaMap[body];
    userState.step = 'DESCRICAO';
    setUserState(from, 'NOVA_SOLICITACAO', userState);
    
    // Envia a mensagem para inser√ß√£o da descri√ß√£o
    const message = `üìù *Nova ${userState.tipoNome} - ${secretariaMap[body]}*\n\n` +
                   `Por favor, descreva detalhadamente sua ${userState.tipoNome.toLowerCase()}:\n\n` +
                   `0Ô∏è‚É£ - Voltar ao menu principal\n`;
    
    await sendMessage(from, message);
}

// Exporta as fun√ß√µes diretamente para evitar depend√™ncia circular
module.exports.initializeMessageController = initializeMessageController;
module.exports.handleMessage = handleMessage;